// Copyright (c) 2017-2018 Xiamen Yaji Software Co., Ltd.  

CCEffect %{
  techniques:
  - passes:
    - vert: vs
      frag: fs
      blendState:
        targets:
        - blend: true
      rasterizerState:
        cullMode: none
      properties:
        texture: { value: white }
        posx: {value: 0.5}
        gloryslope: {value: 2.}
        gloryrange: {value: 0.2}
        gloryintensity: {value: 5.}
        reswidth: {value: 1920.}
        resheight: {value: 1080.}
}%


CCProgram vs %{
  precision highp float;

  #include <cc-global>
  #include <cc-local>

  in vec3 a_position;
  in vec4 a_color;
  out vec4 v_color;

  #if USE_TEXTURE
  in vec2 a_uv0;
  out vec2 v_uv0;
  #endif

  void main () {
    vec4 pos = vec4(a_position, 1);

    #if CC_USE_MODEL
    pos = cc_matViewProj * cc_matWorld * pos;
    #else
    pos = cc_matViewProj * pos;
    #endif

    #if USE_TEXTURE
    v_uv0 = a_uv0;
    #endif

    v_color = a_color;

    gl_Position = pos;
  }
}%


CCProgram fs %{
  precision highp float;
  
  #include <alpha-test>

  in vec4 v_color;

  #if USE_TEXTURE
  in vec2 v_uv0;
  uniform sampler2D texture;
  #endif

  uniform GLORY {
    float posx;
    float gloryslope;
    float gloryrange;
    float gloryintensity;
    float reswidth;
    float resheight;
  }

  void main () {
    vec4 o = vec4(1, 1, 1, 1);

    #if USE_TEXTURE
    o *= texture(texture, v_uv0);
      #if CC_USE_ALPHA_ATLAS_TEXTURE
      o.a *= texture2D(texture, v_uv0 + vec2(0, 0.5)).r;
      #endif
    #endif

    o *= v_color;

    ALPHA_TEST(o);

    float snx = (gl_FragCoord.x / reswidth);
    float sny = (gl_FragCoord.y / resheight);
    float avg = (o.r + o.g + o.b) * (1. / 3.);
    float dx = 0.;
    if ( gloryslope > 0.01 ) {
      dx = ( sny / gloryslope );
    }

    float base_x = posx - dx;
    float strength = 1.;
    float halfrange = gloryrange / 2.;
    float dist = abs(snx - base_x);
    if ( (dist > 0.) && (dist < halfrange) ) {
      float cof = (halfrange - dist) / halfrange;
      strength = exp2(gloryintensity * cof);
    }

    gl_FragColor = o * strength;
  }
}%
