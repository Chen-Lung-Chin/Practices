// Copyright (c) 2017-2018 Xiamen Yaji Software Co., Ltd.  

CCEffect %{
  techniques:
  - passes:
    - vert: vs
      frag: fs
      blendState:
        targets:
        - blend: true
      rasterizerState:
        cullMode: none
      properties:
        texture: { value: white }
        alphaThreshold: { value: 0.5 }
        posx: {value: 0.25}
        layer1_texture: { value: white }
        layer1_range: {value: 0.2}
        layer1_weight: {value: 0.5}
        reswidth: {value: 1920.}
        resheight: {value: 1080.}
}%


CCProgram vs %{
  precision highp float;

  #include <cc-global>
  #include <cc-local>

  in vec3 a_position;
  in vec4 a_color;
  out vec4 v_color;

  #if USE_TEXTURE
  in vec2 a_uv0;
  out vec2 v_uv0;
  #endif

  void main () {
    vec4 pos = vec4(a_position, 1);

    #if CC_USE_MODEL
    pos = cc_matViewProj * cc_matWorld * pos;
    #else
    pos = cc_matViewProj * pos;
    #endif

    #if USE_TEXTURE
    v_uv0 = a_uv0;
    #endif

    v_color = a_color;

    gl_Position = pos;
  }
}%


CCProgram fs %{
  precision highp float;
  
  #include <alpha-test>

  in vec4 v_color;

  #if USE_TEXTURE
  in vec2 v_uv0;
  uniform sampler2D texture;
  #endif

  uniform MULTI {
    float posx;
    sampler2D layer1_texture;
    float layer1_range;
    float layer1_weight;
    float reswidth;
    float resheight;
  }

  void main () {
    vec4 o = vec4(1, 1, 1, 1);
    vec4 layer1_clr = vec4(0., 0., 0., 0.);

    #if USE_TEXTURE
    o *= texture(texture, v_uv0);
      #if CC_USE_ALPHA_ATLAS_TEXTURE
      o.a *= texture2D(texture, v_uv0 + vec2(0, 0.5)).r;
      #endif
    #endif

    o *= v_color;

    

    ALPHA_TEST(o);

    float snx = (gl_FragCoord.x / reswidth);
    float sny = (gl_FragCoord.y / resheight);
    float base_x = posx - (layer1_range / 2.);
    float dist = (snx - base_x);
    vec3 final_rgb = o.rgb;
    if ( (dist > 0.) && (dist < layer1_range) ) {
      float layer1_u = (dist / layer1_range);
      layer1_clr = texture(layer1_texture, vec2(layer1_u, v_uv0.y));
      final_rgb = (o.rgb * (1. - layer1_weight)) + (layer1_clr.rgb * layer1_weight);
    }

    gl_FragColor = vec4(final_rgb, o.a);
  }
}%
