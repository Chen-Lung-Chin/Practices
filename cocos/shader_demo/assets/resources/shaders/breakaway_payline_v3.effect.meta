{
  "ver": "1.0.22",
  "uuid": "3d936d7e-7015-4143-bfd3-587098432ca5",
  "compiledShaders": [
    {
      "glsl1": {
        "vert": "\nprecision highp float;\nuniform mat4 cc_matViewProj;\nuniform mat4 cc_matWorld;\n\nattribute vec3 a_position;\nattribute vec4 a_color;\nvarying vec4 v_color;\n\n#if USE_TEXTURE\nattribute vec2 a_uv0;\nvarying vec2 v_uv0;\n#endif\n\nuniform float start;\nuniform float dist;\nuniform float tail_len;\nuniform float tail_uv;\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n\n  #if USE_TEXTURE\n  float head = start + dist; \n  float tail = head - tail_len;\n  v_uv0 = a_uv0;\n  float cx = ( pos.x + 1. ) * 0.5;\n\n  v_uv0.x = (( cx - tail ) / tail_len) * tail_uv;\n  #endif\n\n  v_color = a_color;\n\n  gl_Position = pos;\n}\n",
        "frag": "\nprecision highp float;\n\n#if USE_ALPHA_TEST\n  \n  uniform float alphaThreshold;\n#endif\n\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\n\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\n\nvarying vec4 v_color;\n\n#if USE_TEXTURE\nvarying vec2 v_uv0;\nuniform sampler2D texture;\n#endif\n\nuniform float glow_range_unit;\nuniform float glow_intensity;\nvec4 calc_bloom_color_simple( vec4 clr ) {\n  float alpha = clamp( clr.a * glow_intensity, 0., 1.);\n  return vec4((clr.rgb * glow_intensity), alpha);\n}\n\nvec4 calc_bloom_color_v1( vec4 clr ) {\n  vec4 final_clr = clr;\n  if ( final_clr.a > 0.9 ) {\n    return final_clr;\n  }\n\n  final_clr = vec4(0.,0.,0.,0.);\n  float num = 20. * 4.;\n  float degree_slice = 360. / 4.;\n  for ( float range = 0.; range < 20.; range++ ) {\n    float dist = (range * glow_range_unit);\n    for ( float slice = 0.; slice < 4.; slice++ ) {\n      float rad = radians( slice * degree_slice );\n      vec2 offset = normalize(vec2( cos(rad), sin(rad) )) * dist;\n      final_clr += texture2D(texture, (v_uv0 + offset));\n    }\n  }\n\n  if ( final_clr.a > 0. ) {\n    return final_clr * ( glow_intensity / num );\n  } else {\n    return clr;\n  }\n}\n\nvec4 calc_bloom_color_v2( vec4 clr ) {\n  vec4 final_clr = clr;\n  if ( final_clr.a > 1. ) {\n    return final_clr;\n  }\n\n  final_clr = vec4(0.,0.,0.,0.);\n  float num = 20. * 4.;\n  float degree_slice = 360. / 4.;\n  for ( float range = 0.; range < 20.; range++ ) {\n    float dist = (range * glow_range_unit);\n    for ( float slice = 0.; slice < 4.; slice++ ) {\n      float rad = radians( slice * degree_slice );\n      vec2 offset = normalize(vec2( cos(rad), sin(rad) )) * dist;\n      final_clr += texture2D(texture, (v_uv0 + offset));\n    }\n  }\n\n  if ( final_clr.a > 0. ) {\n    final_clr.rgb *= ( glow_intensity / num );\n    final_clr.a /= num;\n    return final_clr;\n  } else {\n    return clr;\n  }\n}\n\nvoid main () {\n  vec4 o = vec4(1, 1, 1, 1);\n\n  #if USE_TEXTURE\n  o *= texture2D(texture, v_uv0);\n    #if CC_USE_ALPHA_ATLAS_TEXTURE\n    o.a *= texture2D(texture, v_uv0 + vec2(0, 0.5)).r;\n    #endif\n  #endif\n\n  o = calc_bloom_color_v2(o);\n  \n  o *= v_color;\n\n  ALPHA_TEST(o);\n\n  gl_FragColor = o;\n}\n"
      },
      "glsl3": {
        "vert": "\nprecision highp float;\nuniform CCGlobal {\n  vec4 cc_time;\n\n  vec4 cc_screenSize;\n\n  vec4 cc_screenScale;\n\n  vec4 cc_nativeSize;\n\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n\n  vec4 cc_exposure;\n\n  vec4 cc_mainLitDir;\n\n  vec4 cc_mainLitColor;\n\n  vec4 cc_ambientSky;\n  vec4 cc_ambientGround;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\n\nin vec3 a_position;\nin vec4 a_color;\nout vec4 v_color;\n\n#if USE_TEXTURE\nin vec2 a_uv0;\nout vec2 v_uv0;\n#endif\n\nuniform MOVEMENT {\n  float start;\n  float dist;\n  float tail_len;\n  float tail_uv;\n}\n\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n\n  #if USE_TEXTURE\n  float head = start + dist; \n  float tail = head - tail_len;\n  v_uv0 = a_uv0;\n  float cx = ( pos.x + 1. ) * 0.5;\n\n  v_uv0.x = (( cx - tail ) / tail_len) * tail_uv;\n  #endif\n\n  v_color = a_color;\n\n  gl_Position = pos;\n}\n",
        "frag": "\nprecision highp float;\n\n#if USE_ALPHA_TEST\n  \n  uniform ALPHA_TEST {\n    float alphaThreshold;\n  }\n#endif\n\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\n\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\n\nin vec4 v_color;\n\n#if USE_TEXTURE\nin vec2 v_uv0;\nuniform sampler2D texture;\n#endif\n\nuniform GLOW {\n  float glow_range_unit;\n  float glow_intensity;\n}\n\nvec4 calc_bloom_color_simple( vec4 clr ) {\n  float alpha = clamp( clr.a * glow_intensity, 0., 1.);\n  return vec4((clr.rgb * glow_intensity), alpha);\n}\n\nvec4 calc_bloom_color_v1( vec4 clr ) {\n  vec4 final_clr = clr;\n  if ( final_clr.a > 0.9 ) {\n    return final_clr;\n  }\n\n  final_clr = vec4(0.,0.,0.,0.);\n  float num = 20. * 4.;\n  float degree_slice = 360. / 4.;\n  for ( float range = 0.; range < 20.; range++ ) {\n    float dist = (range * glow_range_unit);\n    for ( float slice = 0.; slice < 4.; slice++ ) {\n      float rad = radians( slice * degree_slice );\n      vec2 offset = normalize(vec2( cos(rad), sin(rad) )) * dist;\n      final_clr += texture(texture, (v_uv0 + offset));\n    }\n  }\n\n  if ( final_clr.a > 0. ) {\n    return final_clr * ( glow_intensity / num );\n  } else {\n    return clr;\n  }\n}\n\nvec4 calc_bloom_color_v2( vec4 clr ) {\n  vec4 final_clr = clr;\n  if ( final_clr.a > 1. ) {\n    return final_clr;\n  }\n\n  final_clr = vec4(0.,0.,0.,0.);\n  float num = 20. * 4.;\n  float degree_slice = 360. / 4.;\n  for ( float range = 0.; range < 20.; range++ ) {\n    float dist = (range * glow_range_unit);\n    for ( float slice = 0.; slice < 4.; slice++ ) {\n      float rad = radians( slice * degree_slice );\n      vec2 offset = normalize(vec2( cos(rad), sin(rad) )) * dist;\n      final_clr += texture(texture, (v_uv0 + offset));\n    }\n  }\n\n  if ( final_clr.a > 0. ) {\n    final_clr.rgb *= ( glow_intensity / num );\n    final_clr.a /= num;\n    return final_clr;\n  } else {\n    return clr;\n  }\n}\n\nvoid main () {\n  vec4 o = vec4(1, 1, 1, 1);\n\n  #if USE_TEXTURE\n  o *= texture(texture, v_uv0);\n    #if CC_USE_ALPHA_ATLAS_TEXTURE\n    o.a *= texture2D(texture, v_uv0 + vec2(0, 0.5)).r;\n    #endif\n  #endif\n\n  o = calc_bloom_color_v2(o);\n  \n  o *= v_color;\n\n  ALPHA_TEST(o);\n\n  gl_FragColor = o;\n}\n"
      }
    }
  ],
  "subMetas": {}
}