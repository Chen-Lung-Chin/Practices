// Copyright (c) 2017-2018 Xiamen Yaji Software Co., Ltd.  

CCEffect %{
  techniques:
  - passes:
    - vert: vs
      frag: fs
      blendState:
        targets:
        - blend: true
      rasterizerState:
        cullMode: none
      properties:
        texture: { value: white }
        alphaThreshold: { value: 0.5 }
        glow_range_unit: { value: 0.001 }
        glow_intensity: { value: 3. }
}%


CCProgram vs %{
  precision highp float;

  #include <cc-global>
  #include <cc-local>

  in vec3 a_position;
  in vec4 a_color;
  out vec4 v_color;

  #if USE_TEXTURE
  in vec2 a_uv0;
  out vec2 v_uv0;
  #endif

  void main () {
    vec4 pos = vec4(a_position, 1);

    #if CC_USE_MODEL
    pos = cc_matViewProj * cc_matWorld * pos;
    #else
    pos = cc_matViewProj * pos;
    #endif

    #if USE_TEXTURE
    v_uv0 = a_uv0;
    #endif

    v_color = a_color;

    gl_Position = pos;
  }
}%


CCProgram fs %{
  precision highp float;
  
  #include <alpha-test>

  in vec4 v_color;

  #if USE_TEXTURE
  in vec2 v_uv0;
  uniform sampler2D texture;
  #endif

  #define NUM_GLOW_SLICES 5.
  #define NUM_GLOW_RANGE 20.
  uniform GLOW {
    float glow_range_unit;
    float glow_intensity;
  }
  
  vec4 calc_bloom_color( vec4 clr ) {
    vec4 final_clr = clr;
    if ( final_clr.a > 1. ) {
      return final_clr;
    }

    final_clr = vec4(0.,0.,0.,0.);
    float num = NUM_GLOW_RANGE * NUM_GLOW_SLICES;
    float degree_slice = 360. / NUM_GLOW_SLICES;
    for ( float range = 0.; range < NUM_GLOW_RANGE; range++ ) {
      float dist = (range * glow_range_unit);
      for ( float slice = 0.; slice < NUM_GLOW_SLICES; slice++ ) {
        float rad = radians( slice * degree_slice );
        vec2 offset = normalize(vec2( cos(rad), sin(rad) )) * dist;
        final_clr += texture(texture, (v_uv0 + offset));
      }
    }

    if ( final_clr.a > 0. ) {
      final_clr.rgb *= ( glow_intensity / num );
      final_clr.a /= num;
      return final_clr;
    } else {
      return clr;
    }
  }

  vec4 calc_bloom_color_simple( vec4 clr ) {
    float alpha = clamp( clr.a * glow_intensity, 0., 1.);
    return vec4((clr.rgb * glow_intensity), alpha);
  }

  void main () {
    vec4 o = vec4(1, 1, 1, 1);

    #if USE_TEXTURE
    o *= texture(texture, v_uv0);
      #if CC_USE_ALPHA_ATLAS_TEXTURE
      o.a *= texture2D(texture, v_uv0 + vec2(0, 0.5)).r;
      #endif
    #endif

    ALPHA_TEST(o);
    
    o = calc_bloom_color(o);
    // o = calc_bloom_color_simple(o);
    o *= v_color;

    gl_FragColor = o;
  }
}%
