{
  "ver": "1.0.22",
  "uuid": "ef127c2d-784b-4d55-8c92-97f8d19bc954",
  "compiledShaders": [
    {
      "glsl1": {
        "vert": "\nprecision highp float;\nuniform mat4 cc_matViewProj;\nuniform mat4 cc_matWorld;\n\nattribute vec3 a_position;\nattribute vec4 a_color;\nvarying vec4 v_color;\n\n#if USE_TEXTURE\nattribute vec2 a_uv0;\nvarying vec2 v_uv0;\n#endif\n\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n\n  v_color = a_color;\n\n  gl_Position = pos;\n}\n",
        "frag": "\nprecision highp float;\n\n#if USE_ALPHA_TEST\n  \n  uniform float alphaThreshold;\n#endif\n\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\n\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\n\nvarying vec4 v_color;\n\n#if USE_TEXTURE\nvarying vec2 v_uv0;\nuniform sampler2D texture;\n#endif\n\nuniform float posx;\nuniform sampler2D layer1_texture;\nuniform float layer1_range;\nuniform float layer1_weight;\nuniform float reswidth;\nuniform float resheight;\nvoid main () {\n  vec4 o = vec4(1, 1, 1, 1);\n  vec4 layer1_clr = vec4(0., 0., 0., 0.);\n\n  #if USE_TEXTURE\n  o *= texture2D(texture, v_uv0);\n    #if CC_USE_ALPHA_ATLAS_TEXTURE\n    o.a *= texture2D(texture, v_uv0 + vec2(0, 0.5)).r;\n    #endif\n  #endif\n\n  o *= v_color;\n\n  ALPHA_TEST(o);\n\n  float snx = (gl_FragCoord.x / reswidth);\n  float sny = (gl_FragCoord.y / resheight);\n  float base_x = posx - (layer1_range / 2.);\n  float dist = (snx - base_x);\n  vec3 final_rgb = o.rgb;\n  if ( (dist > 0.) && (dist < layer1_range) ) {\n    float layer1_u = (dist / layer1_range);\n    layer1_clr = texture2D(layer1_texture, vec2(layer1_u, v_uv0.y));\n    final_rgb = (o.rgb * (1. - layer1_weight)) + (layer1_clr.rgb * layer1_weight);\n  }\n\n  gl_FragColor = vec4(final_rgb, o.a);\n}\n"
      },
      "glsl3": {
        "vert": "\nprecision highp float;\nuniform CCGlobal {\n  vec4 cc_time;\n\n  vec4 cc_screenSize;\n\n  vec4 cc_screenScale;\n\n  vec4 cc_nativeSize;\n\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n\n  vec4 cc_exposure;\n\n  vec4 cc_mainLitDir;\n\n  vec4 cc_mainLitColor;\n\n  vec4 cc_ambientSky;\n  vec4 cc_ambientGround;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\n\nin vec3 a_position;\nin vec4 a_color;\nout vec4 v_color;\n\n#if USE_TEXTURE\nin vec2 a_uv0;\nout vec2 v_uv0;\n#endif\n\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n\n  v_color = a_color;\n\n  gl_Position = pos;\n}\n",
        "frag": "\nprecision highp float;\n\n#if USE_ALPHA_TEST\n  \n  uniform ALPHA_TEST {\n    float alphaThreshold;\n  }\n#endif\n\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\n\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\n\nin vec4 v_color;\n\n#if USE_TEXTURE\nin vec2 v_uv0;\nuniform sampler2D texture;\n#endif\n\nuniform MULTI {\n  float posx;\n  sampler2D layer1_texture;\n  float layer1_range;\n  float layer1_weight;\n  float reswidth;\n  float resheight;\n}\n\nvoid main () {\n  vec4 o = vec4(1, 1, 1, 1);\n  vec4 layer1_clr = vec4(0., 0., 0., 0.);\n\n  #if USE_TEXTURE\n  o *= texture(texture, v_uv0);\n    #if CC_USE_ALPHA_ATLAS_TEXTURE\n    o.a *= texture2D(texture, v_uv0 + vec2(0, 0.5)).r;\n    #endif\n  #endif\n\n  o *= v_color;\n\n  ALPHA_TEST(o);\n\n  float snx = (gl_FragCoord.x / reswidth);\n  float sny = (gl_FragCoord.y / resheight);\n  float base_x = posx - (layer1_range / 2.);\n  float dist = (snx - base_x);\n  vec3 final_rgb = o.rgb;\n  if ( (dist > 0.) && (dist < layer1_range) ) {\n    float layer1_u = (dist / layer1_range);\n    layer1_clr = texture(layer1_texture, vec2(layer1_u, v_uv0.y));\n    final_rgb = (o.rgb * (1. - layer1_weight)) + (layer1_clr.rgb * layer1_weight);\n  }\n\n  gl_FragColor = vec4(final_rgb, o.a);\n}\n"
      }
    }
  ],
  "subMetas": {}
}